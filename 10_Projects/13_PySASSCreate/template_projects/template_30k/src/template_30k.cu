
/**
 * 
 * ===========================================================================================================
 * IMPORTANT: This file is autogenerated. Do not change!!
 * ===========================================================================================================
 * [KernelCount]30[/KernelCount]
 */

#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <iostream>
#include <fstream>
#include <algorithm>
#include <thread>
#include <format>
#include <vector>
#include <chrono>
#include <map>
#include <string>
#include <unordered_map>
#include <stdint.h>

__global__ void 
Kernel_0(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_1(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_2(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_3(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_4(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_5(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_6(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_7(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_8(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_9(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_10(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_11(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_12(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_13(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_14(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_15(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_16(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_17(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_18(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_19(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_20(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_21(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_22(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_23(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_24(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_25(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_26(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_27(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_28(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

__global__ void 
Kernel_29(unsigned int a, uint64_t *control, uint64_t *ui_output, double* d_output, uint64_t* ui_input, double* d_input, uint64_t *clk_out_1, float* f_output) {
    #pragma unroll 2
    for(unsigned int i=0; i<a; ++i){
        int64_t t1 = clock64();
        int64_t t2 = clock64();
        f_output[i] = static_cast<float>(a * (static_cast<float>(t2-t1) + 1.256f));
    }
    return;
}

template<class T>
void print_out(const std::string& prefix, const std::string& label, const std::vector<T>& data) {
    size_t ss = data.size();
    std::cout << prefix << "[" << label << "]";
    for(int i=0; i<ss; ++i){
        std::cout << data[i];
        if(i<(ss-1)) std::cout << ", ";
    }
    std::cout << "[/" << label << "]" << std::endl;
}

void print_out_single(const std::string& prefix, const std::string& label, const char* data) {
    std::cout << prefix << "[" << label << "]" << data << "[/" << label << "]" << std::endl;
}

int run_test(void* kernel_ptr, int input, int loop_count, const std::string& filename, int kernel_index, const std::string& kernel_name, const std::string& enc_vals){
    std::cout << "[Kernel_" << kernel_index << "]" << std::endl;
    
    // print enc vals
    std::cout << "[EncVals]" << std::endl;
    std::cout << kernel_name << "|" << enc_vals << std::endl;
    std::cout << "[/EncVals]" << std::endl;

    uint64_t addr = reinterpret_cast<uint64_t>(kernel_ptr);
    std::cout << "[KernelAddress]0x" << std::format("{:x}", addr) << "[/KernelAddress]" << std::endl; 
    
    for(int lp=0; lp<loop_count; ++lp){
        std::cout << "   [LoopCount_" << lp << "]" << std::endl;
        // ==================================================================================================
        // Define input data
        // ==================================================================================================
        int control_size = 15;
        int printout = loop_count;
        std::vector<uint64_t> control(control_size);
        std::vector<uint64_t> ui_output(printout);
        std::vector<double> d_output(printout);
        std::vector<float> f_output(printout);
        std::vector<uint64_t> ui_input(printout);
        std::vector<double> d_input(printout);
        std::vector<uint64_t> clk_out_1(printout);
        for(int i=0; i<control.size(); ++i) control[i] = 0;
        for(int i=0; i<ui_output.size(); ++i) ui_output[i] = 0;
        for(int i=0; i<d_output.size(); ++i) d_output[i] = 0.0;
        for(int i=0; i<f_output.size(); ++i) f_output[i] = 0.0f;
        for(int i=0; i<ui_input.size(); ++i) ui_input[i] = 0;
        for(int i=0; i<d_input.size(); ++i) d_input[i] = 0.0;
        for(int i=0; i<clk_out_1.size(); ++i) clk_out_1[i] = 999999998;

        // ==================================================================================================
        // Print input data
        // ==================================================================================================
        std::cout << "      [BeforeKernel]" << std::endl;
        print_out("         ", "Control", control);
        print_out("         ", "UiOutput", ui_output);
        print_out("         ", "DOutput", d_output);
        print_out("         ", "FOutput", f_output);
        print_out("         ", "UiInput", ui_input);
        print_out("         ", "DInput", d_input);
        print_out("         ", "ClkOut1", clk_out_1);

        // ==================================================================================================
        // Copy input data to GPU
        // ==================================================================================================
        uint64_t* device_control;
        cudaMalloc(&device_control, control.size()*sizeof(uint64_t));
        cudaMemcpy(device_control, control.data(), control.size()*sizeof(uint64_t), cudaMemcpyHostToDevice);

        uint64_t* device_ui_output;
        cudaMalloc(&device_ui_output, ui_output.size()*sizeof(uint64_t));
        cudaMemcpy(device_ui_output, ui_output.data(), ui_output.size()*sizeof(uint64_t), cudaMemcpyHostToDevice);

        double* device_d_output;
        cudaMalloc(&device_d_output, d_output.size()*sizeof(double));
        cudaMemcpy(device_d_output, d_output.data(), d_output.size()*sizeof(double), cudaMemcpyHostToDevice);

        float* device_f_output;
        cudaMalloc(&device_f_output, f_output.size()*sizeof(float));
        cudaMemcpy(device_f_output, f_output.data(), f_output.size()*sizeof(float), cudaMemcpyHostToDevice);

        uint64_t* device_ui_input;
        cudaMalloc(&device_ui_input, ui_input.size()*sizeof(uint64_t));
        cudaMemcpy(device_ui_input, ui_input.data(), ui_input.size()*sizeof(uint64_t), cudaMemcpyHostToDevice);

        double* device_d_input;
        cudaMalloc(&device_d_input, d_input.size()*sizeof(double));
        cudaMemcpy(device_d_input, d_input.data(), d_input.size()*sizeof(double), cudaMemcpyHostToDevice);

        uint64_t* device_clk_out_1;
        cudaMalloc(&device_clk_out_1, clk_out_1.size()*sizeof(uint64_t));
        cudaMemcpy(device_clk_out_1, clk_out_1.data(), clk_out_1.size()*sizeof(uint64_t), cudaMemcpyHostToDevice);

        std::cout << "      [/BeforeKernel]" << std::endl;
        // ==================================================================================================
        // Run Kernel
        // ==================================================================================================
        // kernelT<<<1,1>>>(input, device_control, device_ui_output, device_d_output, device_ui_input, device_d_input, device_clk_out_1, device_f_output);
        void* args[] = {&input, &device_control, &device_ui_output, &device_d_output, &device_ui_input, &device_d_input, &device_clk_out_1, &device_f_output};
        cudaError_t err;
        err = cudaLaunchKernel(kernel_ptr, 1, 1, args, 0, nullptr);
        if ( err != cudaSuccess ) {
            print_out_single("         ", "CUDAError", cudaGetErrorString(err));
        }

        err = cudaDeviceSynchronize();
        if ( err != cudaSuccess ) {
            print_out_single("         ", "CUDAError", cudaGetErrorString(err));
        }

        err = cudaGetLastError();
        if ( err != cudaSuccess ) {
            print_out_single("         ", "CUDAError", cudaGetErrorString(err));
        }

        std::cout << "      [AfterKernel]" << std::endl;

        // ==================================================================================================
        // Copy output data to CPU
        // ==================================================================================================
        cudaMemcpy(control.data(), device_control, control.size()*sizeof(uint64_t), cudaMemcpyDeviceToHost);
        cudaMemcpy(ui_output.data(), device_ui_output, ui_output.size()*sizeof(uint64_t), cudaMemcpyDeviceToHost);
        cudaMemcpy(d_output.data(), device_d_output, d_output.size()*sizeof(double), cudaMemcpyDeviceToHost);
        cudaMemcpy(f_output.data(), device_f_output, f_output.size()*sizeof(float), cudaMemcpyDeviceToHost);
        cudaMemcpy(ui_input.data(), device_ui_input, ui_input.size()*sizeof(uint64_t), cudaMemcpyDeviceToHost);
        cudaMemcpy(d_input.data(), device_d_input, d_input.size()*sizeof(double), cudaMemcpyDeviceToHost);
        cudaMemcpy(clk_out_1.data(), device_clk_out_1, clk_out_1.size()*sizeof(uint64_t), cudaMemcpyDeviceToHost);
        cudaFree(device_control);
        cudaFree(device_ui_output);
        cudaFree(device_d_output);
        cudaFree(device_f_output);
        cudaFree(device_ui_input);
        cudaFree(device_d_input);
        cudaFree(device_clk_out_1);

        // ==================================================================================================
        // Print output data
        // ==================================================================================================
        print_out("         ", "Control", control);
        print_out("         ", "UiOutput", ui_output);
        print_out("         ", "DOutput", d_output);
        print_out("         ", "FOutput", f_output);
        print_out("         ", "UiInput", ui_input);
        print_out("         ", "DInput", d_input);
        print_out("         ", "ClkOut1", clk_out_1);

        std::cout << "      [/AfterKernel]" << std::endl;
        std::cout << "   [/LoopCount_" << lp << "]" << std::endl;
    }
    std::cout << "[/Kernel_" << kernel_index << "]" << std::endl;

    return 0;
}

int main(int argc, char** argv){
    std::string fn = std::string(argv[0]);
    int split_ind = fn.find_last_of("/") + 1;
    std::string path = fn.substr(0,split_ind);
    std::string filename = fn.substr(split_ind);
    const int kernel_num = 30;

    if(argc != 3){
        std::cout << std::vformat("{0} [input] [bin_location]", std::make_format_args(fn)) << std::endl;
        std::cout << " * [input]: an integer denoting how many inner loops all kernels do" << std::endl;
        std::cout << " * [bin_location]: the absolute path to the binary" << std::endl;
        return 0;
    }
    unsigned int input = static_cast<unsigned int>(std::stoi(argv[1]));
    int loop_count = (input == 0) ? input++ : input;
    std::string bin_location = std::string(argv[2]);
    if(bin_location.back() != '/'){
        bin_location = bin_location + std::string("/");
    }
    std::string enc_vals = bin_location + filename + std::string("_enc_vals.txt");
    std::cout << "[Filename]" << filename << "[/Filename]" << std::endl;
    std::cout << "[Input]" << input << "[/Input]" << std::endl;
    std::cout << "[EncValsFile]" << enc_vals << "[/EncValsFile]" << std::endl;

    std::ifstream file(enc_vals);
    if (!file.is_open()) {
        std::cout << "[FileReadErr]" << "Failed to open enc_vals file " << enc_vals << "![/FileReadErr]" << std::endl;
        return 0;
    }

    std::vector<std::string> ordered_results = {};
    std::map<std::string, std::string> results = {};
    std::string line;
    while(std::getline(file, line)) {
        size_t iii = line.find_first_of("|") + 1;
        std::string kernel_name = line.substr(0, iii-1);
        std::string enc_vals_str = line.substr(iii);
        results.insert({kernel_name, enc_vals_str});
        ordered_results.push_back(kernel_name);
    }
    file.close();
    if(ordered_results.size() != results.size()){
        std::cout << "[FileReadErr]ordered_result.size() != results.size()[/FileReadErr]" << std::endl;
    }

    std::cout << "[KernelCount]" << kernel_num << "[/KernelCount]" << std::endl;
    std::cout << "[UsedKernelCount]" << results.size() << "[/UsedKernelCount]" << std::endl;

    if(kernel_num < results.size()){
        std::cout << "[FileReadErr]" << "Enc_vals file contains [" << results.size() << " enc_vals] > [" << kernel_num << " kernels]! The file must contain [at most " << kernel_num << " enc_vals][/FileReadErr]" << std::endl;
    }

    std::map<std::string, void*> kernel_ptr = {{"Kernel_0", reinterpret_cast<void*>(&Kernel_0)},{"Kernel_1", reinterpret_cast<void*>(&Kernel_1)},{"Kernel_2", reinterpret_cast<void*>(&Kernel_2)},{"Kernel_3", reinterpret_cast<void*>(&Kernel_3)},{"Kernel_4", reinterpret_cast<void*>(&Kernel_4)},{"Kernel_5", reinterpret_cast<void*>(&Kernel_5)},{"Kernel_6", reinterpret_cast<void*>(&Kernel_6)},{"Kernel_7", reinterpret_cast<void*>(&Kernel_7)},{"Kernel_8", reinterpret_cast<void*>(&Kernel_8)},{"Kernel_9", reinterpret_cast<void*>(&Kernel_9)},{"Kernel_10", reinterpret_cast<void*>(&Kernel_10)},{"Kernel_11", reinterpret_cast<void*>(&Kernel_11)},{"Kernel_12", reinterpret_cast<void*>(&Kernel_12)},{"Kernel_13", reinterpret_cast<void*>(&Kernel_13)},{"Kernel_14", reinterpret_cast<void*>(&Kernel_14)},{"Kernel_15", reinterpret_cast<void*>(&Kernel_15)},{"Kernel_16", reinterpret_cast<void*>(&Kernel_16)},{"Kernel_17", reinterpret_cast<void*>(&Kernel_17)},{"Kernel_18", reinterpret_cast<void*>(&Kernel_18)},{"Kernel_19", reinterpret_cast<void*>(&Kernel_19)},{"Kernel_20", reinterpret_cast<void*>(&Kernel_20)},{"Kernel_21", reinterpret_cast<void*>(&Kernel_21)},{"Kernel_22", reinterpret_cast<void*>(&Kernel_22)},{"Kernel_23", reinterpret_cast<void*>(&Kernel_23)},{"Kernel_24", reinterpret_cast<void*>(&Kernel_24)},{"Kernel_25", reinterpret_cast<void*>(&Kernel_25)},{"Kernel_26", reinterpret_cast<void*>(&Kernel_26)},{"Kernel_27", reinterpret_cast<void*>(&Kernel_27)},{"Kernel_28", reinterpret_cast<void*>(&Kernel_28)},{"Kernel_29", reinterpret_cast<void*>(&Kernel_29)}};
    
    int index = 0;
    for(const auto& ev : ordered_results){
        run_test(kernel_ptr[ev], input, loop_count, filename, index, ev, results[ev]);
        index++;
    }

    return 0;
}